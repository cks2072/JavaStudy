
System.out.println('두번째 생성한 파일입니다.!!');  // 자바에서는'문자열' 안됨
System.out.println("두번째 생성한 파일입니다.!!");
기계어로 번역 -> 컴파일러, 인터프리터
컴파일러 중복 번역 안함 메모리차지 빨리실행,대형프로그램 c c++
인터프리터 중복 번역 대화형 바로바로 실행 네트워크 파이썬,자바스크립트
window,mac,linux 기계어끼리 호환안됨
자바 컴파일러면서 인터프리터 호환성+ 맞춤형 기계어 번역

1. 컴파일 언어 
컴파일 언어는 내가 작성한 소스 코드 전체를 컴퓨터가 알아먹을 수 있는 기계어로 번역한 뒤, 이 번역된 코드를 한번에 실행하는 두 단계를 거쳐 진행된다. 즉 번역과 실행이 완전히 따로 이루어진다는 뜻이다. 번역은 컴파일러를 통해 수행되고, 대표적인 예시로는 C, C++, Go 등이 있다.
 
 * 특징 *

1. 컴파일은 오래 걸릴 수 있다! 
 --- 힘겹게 만든 코드를 5시간에 거쳐 컴파일을 했다고 가정해보자! 그런데 변수 이름에 오타가 나서 에러가 발생했다면? 5시간동안 다시 컴파일 해야한다. ㅠ

2. 하지만 이미 컴파일이 된 프로그램이라면? 굉장히 빠른 속도로 실행이 가능하다.
 --- 이미 컴파일이 다 되어 있어서 실행만 하면 되기 때문에!

3. 운영체제 (OS) 이식성이 낮다.
 --- OS마다 실행할 수 있는 기계어가 다른 경우가 있다. 그럼 다른 OS에서 내 실행 파일을 실행시키려면? 이미 만들어둔 실행 파일은 불행히도 실행되지 않는다. 해당 OS에 맞는 컴파일러로 다시 컴파일 해줘야한다.


2. 인터프리터 언어
 
인터프리터 언어는 소스 코드를 한 줄씩, 번역과 실행을 동시에 진행한다. 번역은 인터프리터를 통해 수행되며, 대표적인 예시로는 Python, R, JavaScript 등이 있다.

 * 특징 *

1. 줄 단위로 번역과 실행을 하기 때문에 실행이 느리다.
 --- 다시 다 번역하고 실행해야 해서...

2. 디버깅이 쉽다! (개발의 편의성)
 --- 오류를 발견하면 해당 코드 밑으로는 번역 및 실행을 못하기 때문에 오류 발견이 쉽다.

3. 운영체제 이식성이 좋다.
 --- OS마다 호환되는 인터프리터만 준비되어 있다면 바로 실행이 가능하다!

노드 라이브러리
npmjs.com

자바 라이브러리
maven  gradle

해당하는 자바 버전이 없으면 자동으로 경로에 다운 받음
경로 C:\Users\601\.m2\repository\org

외부라이브러리를 불러오면 자동으로 다운
안되면 수동으로 업데이트
프로젝트 오른쪽클릭 maven -> update project

라이브러리 불러올때 라이브러리끼리 충돌일어나면 새로운 라이브러리의 버전을 낮춤

System.out.print("Hello~");    print줄바꿈 없는 문자열 출력
system.out.println("Java!!");   println 줄바꿈 있는 문자열 출력

Help -> eclipse marketplace  이클립스 마켓플레이스

delete하면 이클립스 상에서만 지움 실제파일 존재
실제파일까지 지우는 거 체크시 실제파일 삭제

라이브러리 불러오기 import

package 안만들고 class만들때 package같이 생성 가능

